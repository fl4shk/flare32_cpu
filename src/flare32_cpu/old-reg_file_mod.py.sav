#!/usr/bin/env python3

from amaranth import *
from amaranth.lib.data import *
from amaranth.lib import enum
from amaranth.asserts import Assert, Assume, Cover
from amaranth.asserts import Past, Rose, Fell, Stable

from amaranth.sim import Simulator, Delay, Tick

from libcheesevoyage.misc_util import *
from libcheesevoyage.general.container_types import *

def REG_FILE_NUM_RD():
	return 4
class RegFileBusRd:
	def __init__(self):
		#self.rd_en_arr = cast_shape(
		#	[FieldInfo(1, attrs=sig_keep())
		#		for i in range(RegFileBus.NUM_RD())],
		#	name="reg_rd_en_arr"
		#)
		self.addr_arr = cast_shape(
			[FieldInfo(INSN_REG_WIDTH(), attrs=sig_keep())
				for i in range(REG_FILE_NUM_RD())],
			name="reg_rd_addr_arr"
		)
		self.data_arr = cast_shape(
			[FieldInfo(MAIN_WIDTH(), attrs=sig_keep())
				for i in range(REG_FILE_NUM_RD())],
			name="reg_rd_data_arr"
		)
class RegFileBusWr:
	def __init__(self):
		self.en = cast_shape(
			1, name="reg_wr_en", attrs=sig_keep(),
		)
		self.addr = cast_shape(
			INSN_REG_WIDTH(), name="reg_wr_addr", attrs=sig_keep(),
		)
		self.data = cast_shape(
			MAIN_WIDTH(), name="reg_wr_data", attrs=sig_keep(),
		)
		
class RegFileBus:
	def __init__(self):
		#--------
		#inp_shape = {}
		#outp_shape = {}
		self.rd = RegFileBusRd()
		self.wr = RegFileBusWr()
		#--------
		#inp_shape["wr_en"] = FieldInfo(
		#	1, attrs=sig_keep()
		#)
		#inp_shape["wr_addr"] = FieldInfo(
		#	INSN_REG_WIDTH(), attrs=sig_keep()
		#)
		#inp_shape["wr_data"] = FieldInfo(
		#	MAIN_WIDTH(), attrs=sig_keep()
		#)
		#inp_shape["rd_addr_arr"] = FieldInfo(
		#	[FieldInfo(INSN_REG_WIDTH(), attrs=sig_keep())
		#		for i in range(RegFileBus.NUM_RD())],
		#	#name="rd_addr"
		#)
		#outp_shape["rd_data_arr"] = FieldInfo(
		#	[FieldInfo(MAIN_WIDTH(), attrs=sig_keep())
		#		for i in range(RegFileBus.NUM_RD())],
		#	#name="rd_data"
		#)
		#--------
		#self.inp = Splitrec(inp_shape)
		#self.outp = Splitrec(outp_shape)
		#--------
	@staticmethod
	def NUM_RD():
		return REG_FILE_NUM_RD

class RegFile(Elaboratable):
	def __init__(self, depth: int):
		self.__bus = RegFileBus()
		self.__depth = depth

		# One Memory for every read port,
		# but write the same contents from the single-element `bus.wr_...`
		# ports to every individual `Memory.write_port()`
		self.__mem = [
			Memory(
				width=MAIN_WIDTH(),
				depth=depth,
				init=[0x0 for j in range(self.depth())]
			)
			for i in range(RegFileBus.NUM_RD())
		]
	def bus(self):
		return self.__bus
	def depth(self):
		return self.__depth
	def elaborate(self, platform: str) -> Module:
		#--------
		m = Module()
		#--------
		bus = self.bus()

		loc = Blank()

		loc.rd_port_lst = []
		loc.wr_port_lst = []

		for i in range(len(self.__mem)):
			loc.rd_port_lst += [self.__mem[i].read_port()]
			loc.wr_port_lst += [self.__mem[i].write_port()]
			m.submodules += [loc.rd_port_lst[i] + loc.wr_port_lst[i]]

			m.d.comb += [
				#loc.rd_port_lst[i].addr.eq(bus.inp.rd_addr_arr[i]),
				#bus.outp.rd_data_arr[i].eq(loc.rd_port_lst[i].data),
				#loc.wr_port_lst[i].addr.eq(bus.inp.wr_addr),
				#loc.wr_port_lst[i].data.eq(bus.inp.wr_data),
				#loc.wr_port_lst[i].en.eq(bus.inp.wr_en),
				loc.rd_port_lst[i].addr.eq(bus.rd.addr_arr[i]),
				bus.rd.data_arr[i].eq(loc.rd_port_lst[i].data),
				loc.wr_port_lst[i].addr.eq(bus.wr.addr),
				loc.wr_port_lst[i].data.eq(bus.wr.data),
				loc.wr_port_lst[i].en.eq(bus.wr.en),
			]
		#--------
		return m
		#--------
